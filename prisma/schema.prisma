generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  member    Member[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String?
  description  String?
  env          String?
  tools        String?
  version      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  members      Member[]
  requirements Requirement[]
  testPlans    TestPlan[]
  testResults  TestResult[]
  build        Build?
  deploy       Deploy?
  config       Config?
}

model Member {
  projectId Int
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  role Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([projectId, userId])
}

enum Role {
  OWNER
  TESTER
  QA
}

model Requirement {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  code        String
  title       String?
  description String?
  file        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  reference   Reference[]
}

model TestPlan {
  id             Int        @id @default(autoincrement())
  projectId      Int
  project        Project    @relation(fields: [projectId], references: [id])
  code           String
  title          String?
  description    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  lastExecutedAt DateTime?
  status         TestStatus @default(PENDING)

  testCase  TestCase[]
  reference Reference[]
}

model Reference {
  testPlanId Int
  reqId      Int
  testPlan   TestPlan    @relation(fields: [testPlanId], references: [id])
  req        Requirement @relation(fields: [reqId], references: [id])

  @@id([testPlanId, reqId])
}

model TestCase {
  id         Int      @id @default(autoincrement())
  testPlanId Int
  testPlan   TestPlan @relation(fields: [testPlanId], references: [id])

  code           String
  title          String?
  description    String?
  type           TestType     @default(MANUAL)
  priority       TestPriority @default(LOW)
  precondition   String?
  steps          String?
  data           String?
  expected       String?
  result         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  lastExecutedAt DateTime?
  status         TestStatus   @default(PENDING)
  script         String?
}

enum TestType {
  MANUAL
  AUTO
}

enum TestPriority {
  HIGH
  MEDIUM
  LOW
}

enum TestStatus {
  PASSED
  FAILED
  PENDING
}

model TestResult {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  duration  String
  rating    Int
  status    TestStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Build {
  id          Int        @id @default(autoincrement())
  projectId   Int        @unique
  project     Project    @relation(fields: [projectId], references: [id])
  description String?
  log         BuildLog[]
  runEndpoint String?
  getEndpoint String?
  token       String?
}

model BuildLog {
  id      Int   @id @default(autoincrement())
  buildId Int
  build   Build @relation(fields: [buildId], references: [id])

  createdAt DateTime   @default(now())
  duration  String
  status    TestStatus @default(PENDING)
}

model Deploy {
  id          Int         @id @default(autoincrement())
  projectId   Int         @unique
  project     Project     @relation(fields: [projectId], references: [id])
  description String?
  log         DeployLog[]
  runEndpoint String?
  getEndpoint String?
  token       String?
}

model DeployLog {
  id       Int    @id @default(autoincrement())
  deployId Int
  deploy   Deploy @relation(fields: [deployId], references: [id])

  createdAt DateTime   @default(now())
  duration  String
  status    TestStatus @default(PENDING)
}

enum DashboardView {
  TEST
  ALL
  GITHUB_ACITON
}

model Config {
  projectId Int     @unique
  project   Project @relation(fields: [projectId], references: [id])

  createdAt     DateTime @default(now())
  dashboardView DashboardView @default(ALL)
  githubOwner   String?
  githubProject String?
}
